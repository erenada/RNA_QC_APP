# 01_data_loading_preprocessing.R
#
# Author: Eren Ada, PhD
# Date: 05/08/2025
# 
# Description: 
# This script performs the initial data loading and preprocessing steps for the Food Allergy RNA-seq analysis.
# It handles three main tasks:
# 1. Loading and validating the count matrix and metadata
# 2. Cleaning and formatting metadata
# 3. Creating the DESeqDataSet object with appropriate design
#
# Input files:
# - Count matrix: data/processed/wallrapp_counts_deduplicated.csv
#   Format: Rows = genes (ENSEMBL IDs), Columns = samples
# - Metadata: data/raw/wallrapp_samples.csv
#   Required columns: Strain (B6, BALBc), Treatment (CTRL, FA), Tissue (NG, T-DRG, L-DRG)
#
# Output files:
# - Cleaned metadata: data/metadata/sample_info_cleaned.csv
# - DESeqDataSet object: results/dea/deseq2_objects/dds_unprocessed.rds
# - QC report: logs/data_loading_qc_report.csv
# - Group information: logs/group_structure.csv
# - Processing log: logs/01_data_loading_log.txt

# ========================= #
# 0. Setup and Preparation #
# ========================= #

# Set the project directory explicitly
project_dir <- "/Users/eren/Desktop/HMS/ChiuLab-Antonia/FoodAllergy_RNAseq_Analysis"
setwd(project_dir)

# Load required packages silently
suppressPackageStartupMessages({
  library(tidyverse) # For data manipulation
  library(here)      # For robust file paths
  
  # Initialize here with the correct project directory
  here::i_am("scripts/01_data_loading_preprocessing.R")
  
  library(DESeq2)    # For differential expression analysis
})

# WORKAROUND: Fix for "superclass 'ExpData' not defined" error in R 4.5.0
# As reported in https://github.com/thelovelab/DESeq2/issues/112
setOldClass("ExpData")

# Set up file paths using file.path() for consistency across systems
paths <- list(
  count_matrix = file.path(project_dir, "data", "processed", "wallrapp_counts_deduplicated.csv"),
  metadata_raw = file.path(project_dir, "data", "raw", "wallrapp_samples.csv"),
  metadata_cleaned = file.path(project_dir, "data", "metadata", "sample_info_cleaned.csv"),
  dds_output = file.path(project_dir, "results", "dea", "deseq2_objects", "dds_unprocessed.rds"),
  log_file = file.path(project_dir, "logs", "01_data_loading_log.txt"),
  qc_report = file.path(project_dir, "logs", "data_loading_qc_report.csv"),
  group_info = file.path(project_dir, "logs", "group_structure.csv")
)

# Create backup of input files
backup_dir <- file.path(project_dir, "data", "backup", format(Sys.time(), "%Y%m%d"))
dir.create(backup_dir, recursive = TRUE, showWarnings = FALSE)
file.copy(paths$count_matrix, file.path(backup_dir, basename(paths$count_matrix)))
file.copy(paths$metadata_raw, file.path(backup_dir, basename(paths$metadata_raw)))

# Start logging
dir.create(dirname(paths$log_file), recursive = TRUE, showWarnings = FALSE)
sink(paths$log_file, append = FALSE, split = TRUE)
cat("=== Data Loading and Preprocessing Log ===\n")
cat("Script started:", format(Sys.time(), "%Y-%m-%d %H:%M:%S"), "\n")
tryCatch({
  git_commit <- system("git rev-parse HEAD", intern = TRUE)
  cat("Git commit:", git_commit, "\n")
}, error = function(e) {
  cat("Git commit: Not available (not a git repository)\n")
})
cat("R version:", R.version.string, "\n\n")

# ==================== #
# 1. Load Count Data  #
# ==================== #

cat("Loading count matrix...\n")
# Read count matrix with row names as gene IDs
counts_data <- read.csv(paths$count_matrix, 
                       row.names = 1, 
                       check.names = FALSE)

# Validate count matrix structure and content
validate_counts <- function(counts) {
  checks <- list(
    na_check = any(is.na(counts)),
    negative_check = any(counts < 0),
    duplicate_check = any(duplicated(rownames(counts))),
    numeric_check = !all(sapply(counts, is.numeric))
  )
  
  if (any(unlist(checks))) {
    error_msg <- c(
      if(checks$na_check) "NA values found",
      if(checks$negative_check) "Negative values found",
      if(checks$duplicate_check) "Duplicate gene names found",
      if(checks$numeric_check) "Non-numeric values found"
    )
    stop("Count matrix validation failed: ", paste(error_msg, collapse = "; "))
  }
  
  cat("Count matrix validation passed\n")
  return(TRUE)
}

validate_counts(counts_data)

# Print basic statistics
cat("\nCount Matrix Summary:\n")
cat("- Number of genes:", nrow(counts_data), "\n")
cat("- Number of samples:", ncol(counts_data), "\n")
cat("- Proportion of zeros:", sprintf("%.2f%%", 100 * sum(counts_data == 0) / prod(dim(counts_data))), "\n")
cat("- Per-gene count summary:\n")
print(summary(rowSums(counts_data)))

# =================== #
# 2. Load Metadata   #
# =================== #

cat("\nLoading and validating metadata...\n")
metadata <- read.csv(paths$metadata_raw, row.names = 1, check.names = FALSE)

# Define expected values
valid_values <- list(
  Strain = c("B6", "BALBc"),
  Treatment = c("CTRL", "FA"),
  Tissue = c("NG", "T-DRG", "L-DRG")
)

# Validate metadata structure and content
validate_metadata <- function(meta, valid_values) {
  # Check required columns
  missing_cols <- setdiff(names(valid_values), colnames(meta))
  if (length(missing_cols) > 0) {
    stop("Missing required columns: ", paste(missing_cols, collapse = ", "))
  }
  
  # Check for invalid values in each column
  for (col in names(valid_values)) {
    invalid <- setdiff(unique(meta[[col]]), valid_values[[col]])
    if (length(invalid) > 0) {
      stop("Invalid values in ", col, ": ", paste(invalid, collapse = ", "))
    }
  }
  
  # Check for missing values
  if (any(is.na(meta[names(valid_values)]))) {
    stop("Missing values found in critical columns")
  }
  
  cat("Metadata validation passed\n")
  return(TRUE)
}

validate_metadata(metadata, valid_values)

# ========================== #
# 3. Clean and Format Data  #
# ========================== #

cat("\nCleaning and formatting data...\n")

# Ensure sample consistency between count data and metadata
sample_check <- function(counts, meta) {
  # Check if all count matrix samples are in metadata
  missing_in_meta <- setdiff(colnames(counts), rownames(meta))
  if (length(missing_in_meta) > 0) {
    stop("Samples in count matrix missing from metadata: ", 
         paste(missing_in_meta, collapse = ", "))
  }
  
  # Subset and order metadata to match count matrix
  meta <- meta[colnames(counts), ]
  
  cat("Sample consistency check passed\n")
  return(meta)
}

metadata <- sample_check(counts_data, metadata)

# Set up factor levels with reference levels
for (col in names(valid_values)) {
  metadata[[col]] <- factor(metadata[[col]], 
                           levels = valid_values[[col]])
}

# Create group variable for design
metadata$group <- factor(paste(metadata$Strain, 
                             metadata$Tissue, 
                             metadata$Treatment, 
                             sep = "_"))

# Save cleaned metadata
write.csv(metadata, paths$metadata_cleaned)
cat("Cleaned metadata saved to:", paths$metadata_cleaned, "\n")

# ============================== #
# 4. Create DESeqDataSet Object #
# ============================== #

cat("\nCreating DESeqDataSet object...\n")

# Make sure DESeq2 is properly loaded with namespace
if (!requireNamespace("DESeq2", quietly = TRUE)) {
  stop("DESeq2 package is not available")
}

# Convert count data to integer matrix
counts_matrix <- as.matrix(counts_data)
storage.mode(counts_matrix) <- "integer"

# Create DESeqDataSet using the correct DESeq2 namespace
dds <- DESeq2::DESeqDataSetFromMatrix(
  countData = counts_matrix,
  colData = metadata,
  design = ~ group
)

# Save the DESeqDataSet
dir.create(dirname(paths$dds_output), recursive = TRUE, showWarnings = FALSE)
saveRDS(dds, paths$dds_output)
cat("DESeqDataSet saved to:", paths$dds_output, "\n")

# ================ #
# 5. Save Reports #
# ================ #

# Save group structure information
group_info <- data.frame(
  Group = names(table(metadata$group)),
  SampleCount = as.numeric(table(metadata$group)),
  Strain = sub("_.*", "", names(table(metadata$group))),
  Tissue = sub(".*_(.*?)_.*", "\\1", names(table(metadata$group))),
  Treatment = sub(".*_", "", names(table(metadata$group)))
)
write.csv(group_info, paths$group_info, row.names = FALSE)
cat("\nGroup structure saved to:", paths$group_info, "\n")
cat("\nGroup counts:\n")
print(table(metadata$group))

# Generate QC report
qc_report <- data.frame(
  Metric = c(
    "Total genes",
    "Total samples",
    "Zero count genes",
    "Low count genes (< n_samples)",
    "Mean counts per sample",
    "Median counts per sample",
    "Samples per group (min)",
    "Samples per group (max)"
  ),
  Value = c(
    nrow(counts_data),
    ncol(counts_data),
    sum(rowSums(counts_data) == 0),
    sum(rowSums(counts_data) < ncol(counts_data)),
    round(mean(colSums(counts_data))),
    round(median(colSums(counts_data))),
    min(table(metadata$group)),
    max(table(metadata$group))
  )
)
write.csv(qc_report, paths$qc_report, row.names = FALSE)
cat("\nQC report saved to:", paths$qc_report, "\n")

# Print session info and close log
cat("\nSession Info:\n")
print(sessionInfo())
cat("\nScript finished:", format(Sys.time(), "%Y-%m-%d %H:%M:%S"), "\n")
sink()

# End of script 